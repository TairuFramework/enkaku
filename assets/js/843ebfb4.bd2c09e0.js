"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["4678"],{225:function(e,n,a){a.r(n),a.d(n,{default:()=>h,frontMatter:()=>s,metadata:()=>t,assets:()=>c,toc:()=>d,contentTitle:()=>o});var t=JSON.parse('{"id":"validation","title":"Data validation","description":"Enkaku uses JSON Schema for validation via the Ajv library.","source":"@site/docs/validation.mdx","sourceDirName":".","slug":"/validation","permalink":"/docs/validation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Communications","permalink":"/docs/communications"},"next":{"title":"Security","permalink":"/docs/security"}}'),i=a("4381"),r=a("5904");let s={},o="Data validation",c={},d=[{value:"Using validation",id:"using-validation",level:2},{value:"Defining the schema",id:"defining-the-schema",level:3},{value:"Creating the validator",id:"creating-the-validator",level:3},{value:"Validating data",id:"validating-data",level:3},{value:"Validation in server",id:"validation-in-server",level:2}];function l(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"data-validation",children:"Data validation"})}),"\n",(0,i.jsxs)(n.p,{children:["Enkaku uses ",(0,i.jsx)(n.a,{href:"https://json-schema.org/",children:"JSON Schema"})," for validation via the ",(0,i.jsx)(n.a,{href:"https://ajv.js.org/",children:"Ajv library"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsxs)(n.a,{href:"/docs/api/schema/",children:[(0,i.jsx)(n.code,{children:"@enkaku/schema"})," package"]})," provides a set of APIs and types for creating validators based on JSON schemas."]}),"\n",(0,i.jsx)(n.h2,{id:"using-validation",children:"Using validation"}),"\n",(0,i.jsx)(n.h3,{id:"defining-the-schema",children:"Defining the schema"}),"\n",(0,i.jsxs)(n.p,{children:["First, we define a JSON schema using the ",(0,i.jsx)(n.code,{children:"Schema"})," type to validate the schema definition using TypeScript:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import type { Schema } from '@enkaku/schema'\n\nexport const mySchema = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    age: { type: 'number', minimum: 18, maximum: 65 },\n  },\n  required: ['name'],\n  additionalProperties: false,\n} satisfies Schema\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can also export the type inferred from the schema by importing and using ",(0,i.jsx)(n.code,{children:"FromSchema"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"{1,11,13} showLineNumbers",children:"import type { FromSchema, Schema } from '@enkaku/schema'\n\nexport const mySchema = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    age: { type: 'number', minimum: 18, maximum: 65 },\n  },\n  required: ['name'],\n  additionalProperties: false,\n} as const satisfies Schema\n\nexport type MySchema = FromSchema<typeof mySchema>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Notice how line 11 changed to include the ",(0,i.jsx)(n.code,{children:"as const"})," assertion, which is required for TypeScript to infer the correct type from the schema."]}),"\n",(0,i.jsx)(n.h3,{id:"creating-the-validator",children:"Creating the validator"}),"\n",(0,i.jsxs)(n.p,{children:["To create a validator from a schema, we use the ",(0,i.jsxs)(n.a,{href:"/docs/api/schema/#createvalidator",children:[(0,i.jsx)(n.code,{children:"createValidator()"})," function"]}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"{1,15} showLineNumbers",children:"import { type FromSchema, type Schema, createValidator } from '@enkaku/schema'\n\nexport const mySchema = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    age: { type: 'number', minimum: 18, maximum: 65 },\n  },\n  required: ['name'],\n  additionalProperties: false,\n} as const satisfies Schema\n\nexport type MySchema = FromSchema<typeof mySchema>\n\nexport const mySchemaValidator = createValidator(mySchema)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"validating-data",children:"Validating data"}),"\n",(0,i.jsx)(n.p,{children:"The created validator can be used directly to validate data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// ... see rest of the code in previous sections\n\nconst mySchemaValidator = createValidator(mySchema)\n\nconst validated = mySchemaValidator({ name: 'John', age: 30 })\nconsole.log(validated.isOk()) // true\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Running a validator returns a ",(0,i.jsxs)(n.a,{href:"https://github.com/everweij/typescript-result?tab=readme-ov-file#result",children:[(0,i.jsx)(n.code,{children:"Result"})," type from the ",(0,i.jsx)(n.code,{children:"typescript-result"})," package"]}),", which can be used to check if the validation was successful or not."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsxs)(n.a,{href:"/docs/api/schema/",children:[(0,i.jsx)(n.code,{children:"@enkaku/schema"})," package"]})," provides additional APIs using the validators, notably the ",(0,i.jsx)(n.a,{href:"/docs/api/schema/#asserttype",children:(0,i.jsx)(n.code,{children:"assertType()"})})," and ",(0,i.jsx)(n.a,{href:"/docs/api/schema/#istype",children:(0,i.jsx)(n.code,{children:"isType()"})})," functions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"{1,17,19} showLineNumbers",children:"import { type FromSchema, type Schema, createValidator, assertType, isType } from '@enkaku/schema'\n\nexport const mySchema = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    age: { type: 'number', minimum: 18, maximum: 65 },\n  },\n  required: ['name'],\n  additionalProperties: false,\n} as const satisfies Schema\n\nexport type MySchema = FromSchema<typeof mySchema>\n\nconst mySchemaValidator = createValidator(mySchema)\n\nconst isValid = isType(mySchemaValidator, { name: 'John', age: 25 }) // true\n\nassertType(mySchemaValidator, { name: 'Bob', age: 5 }) // throws an error\n"})}),"\n",(0,i.jsx)(n.h2,{id:"validation-in-server",children:"Validation in server"}),"\n",(0,i.jsxs)(n.p,{children:["When using the ",(0,i.jsxs)(n.a,{href:"/docs/api/server/",children:[(0,i.jsx)(n.code,{children:"@enkaku/server"})," package"]}),", the ",(0,i.jsx)(n.a,{href:"/docs/api/server/#protocol",children:(0,i.jsx)(n.code,{children:"protocol"})})," value can be provided when creating a server instance to validate that incoming messages from the transport match the expected protocol."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import type { ProtocolDefinition } from '@enkaku/protocol'\nimport { serve } from '@enkaku/server'\n\nconst protocol = {\n  test: {\n    type: 'event',\n    data: {\n      type: 'object',\n      properties: { hello: { type: 'string' } },\n      required: ['hello'],\n      additionalProperties: false,\n    },\n  },\n} as const satisfies ProtocolDefinition\n\nserve({\n  protocol,\n  handlers: {\n    test: (ctx) => {\n      console.log('Received test event:', ctx.data.hello)\n    },\n  },\n  // ... other parameters omitted for brevity\n})\n"})})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},5904:function(e,n,a){a.d(n,{Z:function(){return o},a:function(){return s}});var t=a(3749);let i={},r=t.createContext(i);function s(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);