"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["9274"],{7358:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>l,default:()=>h,assets:()=>i,toc:()=>c,frontMatter:()=>o});var r=JSON.parse('{"id":"quick-start","title":"Quick start","description":"Installation","source":"@site/docs/quick-start.mdx","sourceDirName":".","slug":"/quick-start","permalink":"/docs/quick-start","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Discover Enkaku","permalink":"/docs/overview"}}'),a=t("651"),s=t("8769");let o={},l="Quick start",i={},c=[{value:"Installation",id:"installation",level:2},{value:"Your first RPC system using Enkaku",id:"your-first-rpc-system-using-enkaku",level:2},{value:"1. Create handlers",id:"1-create-handlers",level:3},{value:"2. Run it!",id:"2-run-it",level:3},{value:"3. Add a transport",id:"3-add-a-transport",level:3}];function d(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"quick-start",children:"Quick start"})}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(n.p,{children:["All Enkaku packages are available on npm. See the ",(0,a.jsx)(n.a,{href:"/docs/api",children:"API documentation"})," for an overview of the packages and installation instructions for each package."]}),"\n",(0,a.jsx)(n.h2,{id:"your-first-rpc-system-using-enkaku",children:"Your first RPC system using Enkaku"}),"\n",(0,a.jsx)(n.h3,{id:"1-create-handlers",children:"1. Create handlers"}),"\n",(0,a.jsx)(n.p,{children:"First, let's create an object of handlers where keys are the command names and values are functions that get a context object as an argument containing information about the request and return the response as needed."}),"\n",(0,a.jsxs)(n.p,{children:["The following handler expects a request with parameters being an optional object containing a ",(0,a.jsx)(n.code,{children:"name"})," field:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const handlers = {\n  'example:hello': (ctx) => {\n    return { hello: ctx.params?.name ?? 'world' }\n  },\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-run-it",children:"2. Run it!"}),"\n",(0,a.jsxs)(n.p,{children:["The simplest way to run handlers is to use the ",(0,a.jsx)(n.a,{href:"/docs/api/standalone/",children:(0,a.jsx)(n.code,{children:"@enkaku/standalone"})})," package that creates an in-process server and return a client to call handlers."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { standalone } from '@enkaku/standalone'\n\nconst handlers = {\n  'example:hello': (ctx) => {\n    return { hello: ctx.params?.name ?? 'world' }\n  },\n}\nconst client = standalone(handlers)\n\n// Send the request to the server, this returns an object allowing to get the result of the request or cancel it\nconst request = await client.request('example:hello')\n// Wait for the result\nconst response = await request.result // { hello: 'world' }\n\n// We can also provide the expected parameters to the request and get the result directly\nconst result = await client.request('example:hello', { name: 'stranger' }).toValue() // { hello: 'stranger' }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-add-a-transport",children:"3. Add a transport"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"standalone"})," package is useful for testing, but in most cases the client and server will run in different processes, so we need to attach a transport between them."]}),"\n",(0,a.jsxs)(n.p,{children:["In the following example, we use the ",(0,a.jsx)(n.a,{href:"/docs/api/client/",children:(0,a.jsx)(n.code,{children:"@enkaku/client"})})," and ",(0,a.jsx)(n.a,{href:"/docs/api/server/",children:(0,a.jsx)(n.code,{children:"@enkaku/server"})})," packages to create the client and server separately, and the ",(0,a.jsx)(n.a,{href:"/docs/api/transport/",children:(0,a.jsx)(n.code,{children:"@enkaku/transport"})})," package to create the transports."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["This example is for demonstration purposes only, it only works when both the server and the client are running in the same process. For such cases the ",(0,a.jsx)(n.a,{href:"/docs/api/standalone/",children:(0,a.jsx)(n.code,{children:"@enkaku/standalone"})})," package is recommended."]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { Client } from '@enkaku/client'\nimport { serve } from '@enkaku/server'\nimport { createDirectTransports } from '@enkaku/transport'\n\n// Create the client and server transports running in the same process\nconst transports = createDirectTransports()\n\nconst handlers = {\n  'example:hello': (ctx) => {\n    return { hello: ctx.params?.name ?? 'world' }\n  },\n}\n// Serve the handlers using the transport created above\nserve({ handlers, insecure: true, transport: transports.server })\n\n// Create the client using the transport created above\nconst client = new Client({ transport: transports.client })\nconst result = await client.request('example:hello', { name: 'stranger' }).toValue() // { hello: 'stranger' }\n"})})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8769:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return o}});var r=t(2379);let a={},s=r.createContext(a);function o(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);