"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["9274"],{321:function(e,n,t){t.r(n),t.d(n,{default:()=>p,frontMatter:()=>s,metadata:()=>r,assets:()=>l,toc:()=>c,contentTitle:()=>i});var r=JSON.parse('{"id":"quick-start","title":"Quick start","description":"Installation","source":"@site/docs/quick-start.mdx","sourceDirName":".","slug":"/quick-start","permalink":"/docs/quick-start","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Discover Enkaku","permalink":"/docs/introduction"},"next":{"title":"Procedures","permalink":"/docs/procedures"}}'),o=t("5367"),a=t("8250");let s={},i="Quick start",l={},c=[{value:"Installation",id:"installation",level:2},{value:"Your first RPC system using Enkaku",id:"your-first-rpc-system-using-enkaku",level:2},{value:"1. Defining a protocol",id:"1-defining-a-protocol",level:3},{value:"2. Implementing handlers for a protocol",id:"2-implementing-handlers-for-a-protocol",level:3},{value:"3. Running a server",id:"3-running-a-server",level:3},{value:"4. Configuring the transport",id:"4-configuring-the-transport",level:3},{value:"5. Going further",id:"5-going-further",level:3}];function d(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"quick-start",children:"Quick start"})}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(n.p,{children:["All Enkaku packages are available on npm. See the ",(0,o.jsx)(n.a,{href:"/docs/api",children:"API documentation"})," for an overview of the packages and installation instructions for each package."]}),"\n",(0,o.jsx)(n.h2,{id:"your-first-rpc-system-using-enkaku",children:"Your first RPC system using Enkaku"}),"\n",(0,o.jsx)(n.h3,{id:"1-defining-a-protocol",children:"1. Defining a protocol"}),"\n",(0,o.jsxs)(n.p,{children:["A protocol is a mapping of procedure names to a supported ",(0,o.jsx)(n.a,{href:"/docs/procedures#defining-procedures",children:"procedure definition"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { ProtocolDefinition } from '@enkaku/protocol'\n\nconst protocol = {\n  'example:hello': {\n    type: 'request',\n    description: 'Say hello!',\n    param: {\n      type: 'object',\n      properties: {\n        name: { type: 'string', description: 'The name to say hello to.' },\n      },\n      required: ['name'],\n      additionalProperties: false,\n    },\n  },\n} as const satisfies ProtocolDefinition\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-implementing-handlers-for-a-protocol",children:"2. Implementing handlers for a protocol"}),"\n",(0,o.jsx)(n.p,{children:"Let's create an object of handlers where keys are the procedure names and values are functions that get a context object as an argument containing information about the request and return the response as needed."}),"\n",(0,o.jsxs)(n.p,{children:["The following handler expects a request with parameters being an object containing a ",(0,o.jsx)(n.code,{children:"name"})," field:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const handlers = {\n  'example:hello': (ctx) => {\n    return `Hello ${ctx.param.name}`\n  },\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-running-a-server",children:"3. Running a server"}),"\n",(0,o.jsxs)(n.p,{children:["The simplest way to run handlers is to use the ",(0,o.jsx)(n.a,{href:"/docs/api/standalone/",children:(0,o.jsx)(n.code,{children:"@enkaku/standalone"})})," package that creates an in-process server and return a client to call handlers."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { ProtocolDefinition } from '@enkaku/protocol'\nimport { standalone } from '@enkaku/standalone'\n\nconst protocol = {\n  'example:hello': {\n    type: 'request',\n    description: 'Say hello!',\n    param: {\n      type: 'object',\n      properties: {\n        name: { type: 'string', description: 'The name to say hello to.' },\n      },\n      required: ['name'],\n      additionalProperties: false,\n    },\n  },\n} as const satisfies ProtocolDefinition\n\nconst handlers = {\n  'example:hello': (ctx) => {\n    return `Hello ${ctx.param.name}`\n  },\n}\nconst client = standalone<typeof protocol>(handlers)\n\n// Send the request to the server and wait for the result\nconst result = await client.request('example:hello', { param: { name: 'stranger' } }) // 'Hello stranger'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-configuring-the-transport",children:"4. Configuring the transport"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"standalone"})," package is useful for testing, but in most cases the client and server will run in different processes, so we need to attach a transport between them."]}),"\n",(0,o.jsxs)(n.p,{children:["In the following example, we use the ",(0,o.jsx)(n.a,{href:"/docs/api/client/",children:(0,o.jsx)(n.code,{children:"@enkaku/client"})})," and ",(0,o.jsx)(n.a,{href:"/docs/api/server/",children:(0,o.jsx)(n.code,{children:"@enkaku/server"})})," packages to create the client and server separately, and the ",(0,o.jsx)(n.a,{href:"/docs/api/transport/",children:(0,o.jsx)(n.code,{children:"@enkaku/transport"})})," package to create the transports."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["This example is for demonstration purposes only, it only works when both the server and the client are running in the same process. For such cases the ",(0,o.jsx)(n.a,{href:"/docs/api/standalone/",children:(0,o.jsx)(n.code,{children:"@enkaku/standalone"})})," package is recommended."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { Client } from '@enkaku/client'\nimport type { ProtocolDefinition } from '@enkaku/protocol'\nimport { serve } from '@enkaku/server'\nimport { createDirectTransports } from '@enkaku/transport'\n\nconst protocol = {\n  'example:hello': {\n    type: 'request',\n    description: 'Say hello!',\n    param: {\n      type: 'object',\n      properties: {\n        name: { type: 'string', description: 'The name to say hello to.' },\n      },\n      required: ['name'],\n      additionalProperties: false,\n    },\n  },\n} as const satisfies ProtocolDefinition\ntype Protocol = typeof protocol\n\n// Create the client and server transports running in the same process\nconst transports = createDirectTransports()\n\nconst handlers = {\n  'example:hello': (ctx) => {\n    return `Hello ${ctx.param.name}`\n  },\n}\n// Serve the handlers using the transport created above\nserve<Protocol>({ handlers, public: true, transport: transports.server })\n\n// Create the client using the transport created above\nconst client = new Client<Protocol>({ transport: transports.client })\nconst result = await client.request('example:hello', { param: { name: 'stranger' } }) // 'Hello stranger'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"5-going-further",children:"5. Going further"}),"\n",(0,o.jsxs)(n.p,{children:["Learn more about how to ",(0,o.jsx)(n.a,{href:"/docs/procedures",children:"define and handle procedures"}),", ",(0,o.jsx)(n.a,{href:"/docs/communications",children:"handle communications between clients and servers"}),", ",(0,o.jsx)(n.a,{href:"/docs/validation",children:"configure data validation"})," and ",(0,o.jsx)(n.a,{href:"/docs/security",children:"understand the security options"})," in the following pages of this documentation."]})]})}function p(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8250:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return s}});var r=t(3800);let o={},a=r.createContext(o);function s(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);